#!/usr/bin/env python3
"""
Palimpsest Engine Build Configuration
Custom build script for creating the specialized CRPG engine based on Godot
"""

import os
import sys

# Palimpsest Engine configuration - modules to disable for CRPG focus
PALIMPSEST_DISABLED_MODULES = {
    # VR/XR modules - unnecessary for CRPG
    "mobile_vr": "no",
    "openxr": "no", 
    "webxr": "no",
    
    # Advanced lighting - using stylized aesthetics
    "lightmapper_rd": "no",
    "raycast": "no",  # Embree raycast for lightmapping
    
    # Multiplayer modules - single-player focused
    "enet": "no",
    "webrtc": "no", 
    "websocket": "no",
    "multiplayer": "no",
    
    # Language bindings - using GDScript + native extensions
    "mono": "no",
    
    # Advanced 3D tools - simplified workflow
    "csg": "no",
    "vhacd": "no",  # Convex decomposition
    "xatlas_unwrap": "no",  # UV unwrapping
    
    # Network discovery
    "upnp": "no",
    
    # Video codecs - not needed for CRPG
    "theora": "no",
    
    # Advanced camera features
    "camera": "no",
    
    # Advanced image formats (keep essential ones)
    "astcenc": "no",
    "betsy": "no", 
    "cvtt": "no",
    "etcpak": "no",
}

# Modules to keep enabled for CRPG functionality
PALIMPSEST_ENABLED_MODULES = {
    # Core scripting
    "gdscript": "yes",
    
    # Essential image formats
    "jpg": "yes",
    "png": "yes",
    "webp": "yes",
    "bmp": "yes",
    "tga": "yes",
    "hdr": "yes",
    "svg": "yes",
    "tinyexr": "yes",
    "dds": "yes",
    
    # Audio
    "vorbis": "yes",
    "minimp3": "yes",
    "interactive_music": "yes",
    
    # Text and fonts
    "text_server_fb": "yes",
    "text_server_adv": "yes",
    "freetype": "yes",
    "msdfgen": "yes",
    
    # Essential 3D/2D
    "basis_universal": "yes",
    "bcdec": "yes",
    "meshoptimizer": "yes",
    "noise": "yes",  # For procedural generation
    "gridmap": "yes",  # For level building
    
    # File systems
    "zip": "yes",
    "regex": "yes",
    "jsonrpc": "yes",
    
    # Physics (simplified)
    "godot_physics_2d": "yes",
    "godot_physics_3d": "yes",  # Keep for 3D character movement
    
    # Navigation
    "navigation_2d": "yes",
    "navigation_3d": "yes",
    
    # Import/export
    "gltf": "yes",
    "fbx": "yes",
    
    # Security
    "mbedtls": "yes",
}

def get_palimpsest_build_options():
    """Generate build options for Palimpsest Engine"""
    options = {}
    
    # Apply disabled modules
    for module, value in PALIMPSEST_DISABLED_MODULES.items():
        options[f"module_{module}_enabled"] = value
    
    # Apply enabled modules (explicit)
    for module, value in PALIMPSEST_ENABLED_MODULES.items():
        options[f"module_{module}_enabled"] = value
    
    # Palimpsest-specific build options
    options.update({
        # Optimization for CRPG content
        "optimize": "speed",
        "lto": "auto",
        "production": "yes" if "--release" in sys.argv else "no",
        
        # Development features
        "dev_build": "no" if "--release" in sys.argv else "yes",
        "debug_symbols": "yes",
        "separate_debug_symbols": "no",
        
        # Engine customization
        "builtin_freetype": "yes",
        "builtin_zlib": "yes",
        "deprecated": "no",  # Remove deprecated APIs
        
        # Platform optimizations
        "threads": "yes",
        "use_static_cpp": "no",
        
        # Palimpsest branding
        "custom_modules": "./modules/palimpsest",  # Will create this
    })
    
    return options

def create_custom_py():
    """Create custom.py with Palimpsest build options"""
    options = get_palimpsest_build_options()
    
    custom_content = '# Palimpsest Engine Build Configuration\n'
    custom_content += '# Auto-generated by palimpsest_build.py\n\n'
    
    for key, value in options.items():
        custom_content += f'{key} = "{value}"\n'
    
    with open("custom.py", "w") as f:
        f.write(custom_content)
    
    print("âœ“ Created custom.py with Palimpsest build configuration")

def print_build_info():
    """Print information about the Palimpsest build"""
    print("=" * 60)
    print("PALIMPSEST ENGINE BUILD CONFIGURATION")
    print("=" * 60)
    print(f"Disabled modules: {len(PALIMPSEST_DISABLED_MODULES)}")
    for module in sorted(PALIMPSEST_DISABLED_MODULES.keys()):
        print(f"  - {module}")
    
    print(f"\nExplicitly enabled modules: {len(PALIMPSEST_ENABLED_MODULES)}")
    for module in sorted(PALIMPSEST_ENABLED_MODULES.keys()):
        print(f"  + {module}")
    
    print("\nBuild type:", "Release" if "--release" in sys.argv else "Debug")
    print("=" * 60)

def main():
    """Main build script entry point"""
    if len(sys.argv) < 2:
        print("Palimpsest Engine Build Script")
        print("Usage: python palimpsest_build.py [options]")
        print("Options:")
        print("  --setup     Create custom.py configuration")
        print("  --info      Show build configuration info")
        print("  --release   Build release version")
        print("  --clean     Clean build files")
        return
    
    if "--setup" in sys.argv:
        create_custom_py()
    
    if "--info" in sys.argv:
        print_build_info()
    
    if "--clean" in sys.argv:
        print("Cleaning build files...")
        os.system("scons --clean")
    
    # If no setup flags, proceed with build
    if not any(flag in sys.argv for flag in ["--setup", "--info", "--clean"]):
        # Ensure custom.py exists
        if not os.path.exists("custom.py"):
            print("Creating custom.py configuration...")
            create_custom_py()
        
        # Build the engine
        platform = "linuxbsd"  # Default, will be auto-detected by SCons
        if sys.platform == "darwin":
            platform = "macos"
        elif sys.platform == "win32":
            platform = "windows"
        
        build_cmd = f"scons platform={platform}"
        
        # Add release flags if specified
        if "--release" in sys.argv:
            build_cmd += " target=template_release production=yes"
        else:
            build_cmd += " target=editor dev_build=yes"
        
        print(f"Building Palimpsest Engine: {build_cmd}")
        os.system(build_cmd)

if __name__ == "__main__":
    main()